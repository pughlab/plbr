type RawDataset {
    rawDatasetID: ID! @id
    allowedStudies: [String]
    allowedSites: [String]
    name: String!
    description: String!
    minioBucket: MinioBucket @relationship(type: "HAS_MINIO_BUCKET", direction: OUT)

    # custom createRawDatasetWithUploads makes adding timestamps difficult for autogeneration
    createdAt: DateTime! @timestamp(operations: [CREATE])
    # updatedAt: DateTime! @timestamp(operations: [UPDATE])

    fromStudy: Study @relationship(type: "HAS_RAW_DATASET", direction: IN)
    studySite: GeographyCity @relationship(type: "FROM_GEOGRAPHY_CITY", direction: OUT)

    files: [MinioUpload!]! @relationship(type: "HAS_FILE", direction: OUT)

    rawdataFile: MinioUpload @relationship(type: "HAS_RAWDATAFILE", properties: "HasRawdatafile", direction: OUT)
    codeBook: MinioUpload @relationship(type: "HAS_CODEBOOK", properties: "HasCodebook", direction: OUT)

    generatedCuratedDatasets: [CuratedDataset!]! @relationship(type: "GENERATED_CURATED_DATASET", direction: OUT)

    funnelTasks: [Task!]! @relationship(type: "HAS_FUNNEL_TASK", direction: OUT)

}

interface HasRawdatafile @relationshipProperties {
    validated: Boolean!
}

interface HasCodebook @relationshipProperties {
    validated: Boolean!
}

type Mutation {
    # Custom resolver for uploading files and creating nodes to account for them
    createRawDatasetWithMinioBucket(
        studyID: ID!
        studySiteID: ID!
        name: String!
        description: String!
        allowedStudies: [String]
        allowedSites: [String]
    ): RawDataset!
}

extend type RawDataset @auth(
  rules: [{
      isAuthenticated: true,
      where: {AND: [
        {allowedStudies: "$jwt.resource_access.pibu-app.roles"},
        {allowedSites: "$jwt.resource_access.pibu-app.roles"},
        ]}
    }]
)