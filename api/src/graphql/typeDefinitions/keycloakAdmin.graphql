type ClientRole {
  id: ID
  name: String
}

type ClientUser {
  id: ID
  username: String
  email: String
}

type Client {
  id: ID
  clientId: String
}

enum KeycloakSyncSet {
  keycloak
  neo4j
}

enum KeycloakSyncOperation {
  add
  delete
}

type Query {
  keycloakUsersFind: [ClientUser] @auth @hasRole(role: "role|allowedRoles|admin")
  keycloakClientsFind: [Client] @auth @hasRole(role: "role|allowedRoles|admin")
  keycloakClientsFindRole(clientID: ID!, roleName: String!): ClientRole @auth @hasRole(role: "role|allowedRoles|admin")
  keycloakUsersListAvailableClientRoleMappings(userID: ID, clientID: ID!): [ClientRole] @auth @hasRole(role: "role|allowedRoles|admin")
  keycloakUsersListClientRoleMappings(userID: ID, clientID: ID!): [ClientRole] @auth @hasRole(role: "role|allowedRoles|admin")
}

type Mutation {
  keycloakClientsCreateRole(clientID: ID!, roleName: String!): Boolean @auth @hasRole(role: "role|allowedRoles|admin")
  keycloakClientsDelRole(clientID: ID!, roleName: String!): Boolean @auth @hasRole(role: "role|allowedRoles|admin")
  keycloakUsersAddClientRoleMappings(userID: ID!, clientID: ID!, roleID: ID!, roleName: String!): Boolean @auth @hasRole(role: "role|allowedRoles|admin")
  keycloakUsersDelClientRoleMappings(userID: ID!, clientID: ID!, roleID: ID!, roleName: String!): Boolean @auth @hasRole(role: "role|allowedRoles|admin")

  keycloakUsersCreate(email: String!): ClientUser @auth @hasRole(role: "role|allowedRoles|admin")
  keycloakUsersDelete(userID: ID!): Boolean @auth @hasRole(role: "role|allowedRoles|admin")

  keycloakSyncUsers(missingIn: KeycloakSyncSet, operation: KeycloakSyncOperation): Boolean @auth @hasRole(role: "role|allowedRoles|admin")

  keycloakAcceptTOS: Boolean @auth
}