type Neo4jUpdateStats {
  nodesCreated: Int
  nodesDeleted: Int
  relationshipsCreated: Int
  relationshipsDeleted: Int
  propertiesSet: Int
  labelsAdded: Int
  labelsRemoved: Int
  indexesAdded: Int
  indexesRemoved: Int
  constraintsAdded: Int
  constraintsRemoved: Int
}

enum NestedOperations {
  union
  subtract
}

enum NestedSwitch {
  nestedStudyProperty
  nestedRawDatasetProperty
  nestedCuratedDatasetProperty
}

enum NestedSwitchDelete {
  nestedStudyDelete
  nestedRawDatasetDelete
  nestedCuratedDatasetDelete
}

type Mutation {
  nestedStudyProperty(id: ID!, operation: NestedOperations!, property: String!, value: String!): Neo4jUpdateStats @auth @hasRole(role: "role|allowedRoles|admin")
  nestedRawDatasetProperty(id: ID!, operation: NestedOperations!, property: String!, value: String!): Neo4jUpdateStats @auth @hasRole(role: "role|allowedRoles|admin")
  nestedCuratedDatasetProperty(id: ID!, operation: NestedOperations!, property: String!, value: String!): Neo4jUpdateStats @auth @hasRole(role: "role|allowedRoles|admin")
  nestedSwitch(nestedSwitch: NestedSwitch!, id: ID!, operation: NestedOperations!, property: String!, value: String!): Neo4jUpdateStats @auth @hasRole(role: "role|allowedRoles|admin")

  nestedStudyDelete(id: ID!): Neo4jUpdateStats @auth @hasRole(role: "role|allowedRoles|admin")
  nestedRawDatasetDelete(id: ID!): Neo4jUpdateStats @auth @hasRole(role: "role|allowedRoles|admin")
  nestedCuratedDatasetDelete(id: ID!): Neo4jUpdateStats @auth @hasRole(role: "role|allowedRoles|admin")
  nestedSwitchDelete(nestedSwitchDelete: NestedSwitchDelete, id: ID!): Neo4jUpdateStats @auth @hasRole(role: "role|allowedRoles|admin")
}