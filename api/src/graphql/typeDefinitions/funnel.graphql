
# type Log {

# }

enum FunnelState {
  PENDING
  CONFIGURING
  RUNNING
  RESIZING
  COMPLETING
  SUSPENDED
  COMPLETE
  CANCELLED
  QUEUED
}

type Task {
  creationTime: String
  description: String
  id: String
  taskID: ID
  name: String
  state: FunnelState
  allowedStudies: [String]
  allowedSites: [String]

  fromRawDataset: RawDataset @relationship(type: "HAS_FUNNEL_TASK", direction: IN)
  generatedCuratedDataset: CuratedDataset @relationship(type: "FROM_FUNNEL_TASK", direction: OUT)

  fromCuratedDataset: Task @relationship(type: "HAS_FUNNEL_TASK", direction: IN)
  generatedExport: MinioUpload @relationship(type: "FROM_FUNNEL_TASK", direction: OUT)
}

type Mutation {
  submitTask(
    name: String
    description: String
    taskID: String
    image: String
    command: String
    allowedStudies: [String]
    allowedSites: [String]
    ): Task
  cancelTask(taskId: ID): Task
  funnelTaskExportDataVariableFieldDefinitions(taskID: ID!, dataVariableFieldDefinitionIDs: [ID!]!, allowedStudies: [String], allowedSites: [String]): Task
  funnelTaskExportCuratedDataset(taskID: ID!,  curatedDatasetID: ID!, allowedStudies: [String], allowedSites: [String]): Task
}


type Query {
  funnelTasks: [Task]
  funnelTask(taskId: ID): Task
}

extend type Task @auth(
  rules: [{
      isAuthenticated: true,
      where: {AND: [
        {allowedStudies: "$jwt.resource_access.pibu-app.roles"},
        {allowedSites: "$jwt.resource_access.pibu-app.roles"},
        ]}
    }]
)