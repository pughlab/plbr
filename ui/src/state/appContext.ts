import { createSlice, current } from '@reduxjs/toolkit';
import { RootState } from "./store";

interface KeycloakMe {
  keycloakUserID: string;
  name: string; 
  email: string;
}
export interface AppContextState {
    value: number;

    keycloakMe?: KeycloakMe;
}

const initialState: AppContextState = {
    value: 0,
    // currentPage: 'IDLE',
    keycloakMe: undefined,
} as AppContextState;

export const appContextSlice = createSlice({
    name: 'context',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
      setKeycloakMe: (state, action) => {
        state.keycloakMe = action.payload.keycloakMe
      },

    //   increment: (state) => {
    //     // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //     // doesn't actually mutate the state because it uses the Immer library,
    //     // which detects changes to a "draft state" and produces a brand new
    //     // immutable state based off those changes
    //     // state.value += 1;
    //   },
    //   decrement: (state) => {
    //     // state.value -= 1;
    //   },
    // //   // Use the PayloadAction type to declare the contents of `action.payload`
    // //   incrementByAmount: (state, action: PayloadAction<number>) => {
    // //     state.value += action.payload;
    // //   },
    //   changePage: (state, action: PayloadAction<typeof appContextPage>) => {
    //       // state.currentPage = action.payload
    //   }
    
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //   builder
    //     .addCase(incrementAsync.pending, (state) => {
    //       state.status = 'loading';
    //     })
    //     .addCase(incrementAsync.fulfilled, (state, action) => {
    //       state.status = 'idle';
    //       state.value += action.payload;
    //     })
    //     .addCase(incrementAsync.rejected, (state) => {
    //       state.status = 'failed';
    //     });
    // },
  });

export const currentAppContextValue = (state: RootState) => state.context.value;
export const currentAppContextKeycloakMe = (state: RootState) => state.context.keycloakMe;
export const {setKeycloakMe} = appContextSlice.actions

export default appContextSlice.reducer;